using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;

namespace Dev.Tools.CodeAnalysis.Core;

public record CodeBlock
{
    private string? _shortName;
    public string Namespace { get; set; } = null!;

    public string TypeName { get; set; } = null!;

    public string Content { get; set; } = null!;

    public Type? GeneratorType { get; set; }

    public string OutputFileName => $"{TypeName}.g.cs";

    public string TypeFullName => $"{Namespace}.{TypeName}";

    public IList<string> Directives { get; set; } = [];

    public IList<string> Usings { get; set; } = [];

    public Dictionary<string, string> Placeholders { get; set; } = new();

    public string? Header { get; set; }

    public string SyntaxTypeName
    {
        get => _shortName ?? TypeName;
        set => _shortName = value;
    }

    public static implicit operator SourceText(CodeBlock codeBlock)
        => SourceText.From(codeBlock.ToString(), Encoding.UTF8);

    public static implicit operator SyntaxTree(CodeBlock codeBlock)
        => CSharpSyntaxTree.ParseText(codeBlock.ToString());

    public override string ToString() => BuildContent();

    private string BuildContent()
    {
        var replacements = new Dictionary<string, string>
        {
            [nameof(Directives)] = GetDirectives(),
            [nameof(Content)] = Content,
            [nameof(Header)] = GetHeader(),
            [nameof(Usings)] = GetUsings(),
            [nameof(Namespace)] = Namespace,
            [nameof(TypeName)] = TypeName,
            [nameof(TypeFullName)] = TypeFullName,
        }.Concat(Placeholders);

        var builder = new StringBuilder("""
                                        {Header}
                                        {Directives}
                                        {Usings}
                                        namespace {Namespace};
                                        
                                        {Content}
                                        """);
        foreach (var token in replacements)
        {
            builder.Replace($"{{{token.Key}}}", token.Value);
        }

        return builder.ToString();
    }

    private string GetHeader() =>
        Header ??
        $"""
         //------------------------------------------------------------------------------ 
         // <auto-generated> 
         // This code was generated by the {GeneratorType?.FullName ?? "generator"}.
         // 
         // Changes to this file may cause incorrect behavior and will be lost if 
         // the code is regenerated. 
         // </auto-generated> 
         //------------------------------------------------------------------------------
         """;

    private string GetDirectives()
    {
        return string.Join("\n", Directives.Concat(["#nullable enable"]));
    }

    private string GetUsings()
        => Usings
            .Distinct()
            .Where(it => it != Namespace)
            .Aggregate("", (current, it) => current + $"using {it};\n");
}